You are given three integers n, m and k. Consider the following algorithm to find the maximum element of an array of positive integers:

(attached img) 

You should build the array arr which has the following properties:

arr has exactly n integers.
1 <= arr[i] <= m where (0 <= i < n).
After applying the mentioned algorithm to arr, the value search_cost is equal to k.
Return the number of ways to build the array arr under the mentioned conditions. As the answer may grow large, the answer must be computed modulo 109 + 7.

 

Example 1:

Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]
Example 2:

Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.
Example 3:

Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]
 

Constraints:

1 <= n <= 50
1 <= m <= 100
0 <= k <= n


==Explanation==

The runtime complexity of the provided code is O(n * m * k), and the space complexity is O(n * m * k).

Runtime Complexity Explanation:

The code uses three nested loops to fill in the dp array:

The first loop runs for i from 2 to n, so it has a time complexity of O(n).
The second loop runs for j from 1 to m, so it has a time complexity of O(m).
The third loop runs for cost from 1 to k, so it has a time complexity of O(k).
Inside the innermost loop, there is a summation over prev_max from 1 to j. In the worst case, this summation can go up to j, resulting in an additional factor of j.

So, the overall runtime complexity is O(n * m * k * j), which can be simplified to O(n * m * k) because j is bounded by m and is not dependent on the input size.

Space Complexity Explanation:

The dp array is a 3D array with dimensions n + 1, m + 1, and k + 1, resulting in O(n * m * k) space complexity.

There are some additional variables used in the code, but they are not dependent on the input size, so they don't contribute significantly to the space complexity.

Therefore, the overall space complexity of the code is O(n * m * k).
