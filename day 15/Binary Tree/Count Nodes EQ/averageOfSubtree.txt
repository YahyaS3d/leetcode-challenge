Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:

The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.
 

Example 1:

(see example 1 picture)

Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.
Example 2:


Input: root = [1]
Output: 1
Explanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000


== depth-first traversal ==
For each node, calculate the average value of its subtree, and then check if the node's value is equal to this average. If it is, increment a count.

== (BFS) algorithm ==
BFS can help you process nodes level by level and avoid the recursion stack of a depth-first traversal

== time complexity overview ==
 both approaches have a time complexity of O(N), making them efficient for processing binary trees. The space complexity, however, is different: the depth-first traversal has a space complexity of O(H) (where H is the height of the tree), while the BFS approach has a space complexity of O(W) (where W is the maximum width or the number of nodes at the widest level).

 